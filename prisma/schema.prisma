generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String               @id @default(uuid())
  email                           String               @unique
  password                        String
  name                            String?
  createdAt                       DateTime             @default(now())
  updatedAt                       DateTime
  role                            UserRole             @default(MEMBER)
  Activity                        Activity[]
  Member_Member_managedByIdToUser Member[]             @relation("Member_managedByIdToUser")
  Member_Member_userIdToUser      Member?              @relation("Member_userIdToUser")
  News                            News[]
  PasswordResetToken              PasswordResetToken[]

  @@map("User")
}

model Activity {
  id          String   @id
  actionType  String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  userId      String
  User        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("Activity")
}

model Booking {
  id                 String               @id
  courtId            String
  memberId           String
  startTime          DateTime
  endTime            DateTime
  status             String               @default("confirmed")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  type               String               @default("single")
  Court              Court                @relation(fields: [courtId], references: [id])
  Member             Member               @relation(fields: [memberId], references: [id])
  BookingParticipant BookingParticipant[]

  @@map("Booking")
}

model Court {
  id        String       @id
  name      String
  surface   CourtSurface
  type      CourtType
  status    CourtStatus  @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime
  hasLights Boolean      @default(false)
  Booking   Booking[]

  @@map("Court")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  attempts  Int      @default(0)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("PasswordResetToken")
}

model News {
  id        String   @id
  title     String
  content   String
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
  @@map("News")
}

model BookingParticipant {
  id        String   @id
  bookingId String
  name      String
  email     String?
  isMember  Boolean  @default(false)
  memberId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  Booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  Member    Member?  @relation(fields: [memberId], references: [id])

  @@index([bookingId])
  @@index([memberId])
}

model EmailVerification {
  id        String   @id
  email     String
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([email])
}

model Member {
  id                            String               @id
  name                          String
  email                         String               @unique
  phone                         String?
  address                       String?
  membershipType                MembershipType       @default(REGULAR)
  status                        MemberStatus         @default(PENDING)
  notes                         String?
  createdAt                     DateTime             @default(now())
  updatedAt                     DateTime
  managedById                   String?
  userId                        String?              @unique
  invitationToken               String?              @unique
  Booking                       Booking[]
  BookingParticipant            BookingParticipant[]
  User_Member_managedByIdToUser User?                @relation("Member_managedByIdToUser", fields: [managedById], references: [id])
  User_Member_userIdToUser      User?                @relation("Member_userIdToUser", fields: [userId], references: [id])
  Payment                       Payment[]
}

model Payment {
  id        String   @id
  amount    Float
  date      DateTime @default(now())
  status    String
  memberId  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Member    Member   @relation(fields: [memberId], references: [id])
}

enum CourtStatus {
  ACTIVE
  MAINTENANCE
  CLOSED
}

enum CourtSurface {
  HARD
  CLAY
  GRASS
  ARTIFICIAL_GRASS
}

enum CourtType {
  INDOOR
  OUTDOOR
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum MembershipType {
  REGULAR
  PREMIUM
  VIP
}

enum UserRole {
  ADMIN
  STAFF
  MEMBER
}
