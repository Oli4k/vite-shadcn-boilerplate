// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STAFF
  MEMBER
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum MembershipType {
  REGULAR
  PREMIUM
  VIP
}

enum CourtSurface {
  HARD
  CLAY
  GRASS
  ARTIFICIAL_GRASS
}

enum CourtType {
  INDOOR
  OUTDOOR
}

enum CourtStatus {
  ACTIVE
  MAINTENANCE
  CLOSED
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  password      String
  name          String?
  role          UserRole      @default(MEMBER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  managedMembers Member[]     @relation("MemberManager")
  memberProfile Member?       @relation("UserMember")
  resetTokens   PasswordResetToken[]
}

model Member {
  id              String        @id @default(uuid())
  name            String
  email           String        @unique
  phone           String?
  address         String?
  membershipType  MembershipType @default(REGULAR)
  status          MemberStatus   @default(PENDING)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  managedBy       User?         @relation("MemberManager", fields: [managedById], references: [id])
  managedById     String?
  user            User?         @relation("UserMember", fields: [userId], references: [id])
  userId          String?       @unique
  payments        Payment[]
  invitationToken String?       @unique
  bookings        Booking[]
}

model Payment {
  id          String    @id @default(uuid())
  amount      Float
  date        DateTime  @default(now())
  status      String    // PAID, PENDING, FAILED
  member      Member    @relation(fields: [memberId], references: [id])
  memberId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model EmailVerification {
  id        String   @id @default(uuid())
  email     String
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model Court {
  id          String      @id @default(cuid())
  name        String
  surface     CourtSurface
  type        CourtType
  status      CourtStatus @default(ACTIVE)
  hasLights   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  bookings    Booking[]
}

model Booking {
  id          String    @id @default(cuid())
  courtId     String
  court       Court     @relation(fields: [courtId], references: [id])
  memberId    String
  member      Member    @relation(fields: [memberId], references: [id])
  startTime   DateTime
  endTime     DateTime
  status      String    @default("confirmed") // "confirmed", "cancelled", "completed"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}
